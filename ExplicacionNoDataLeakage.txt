CSV Iniciales
      |
      V
+---------------------+
| Preprocesamiento    |  (Carga, Periodo a Fecha, Combinaciones, Relleno de Productos)
| (`df_pre_fe`)       |
+---------------------+
      |
      V
+-------------------------------------------------+
| División Inicial (Por Fecha)                    |
|                                                 |
|  - df_historical_raw (datos históricos completos) |
|  - df_predict_raw (ESQUELETO de futuros periodos) |
+-------------------------------------------------+
      |
      V
+-------------------------------------------------------------------+
| Cálculo de FUTURE_TARGET (SOLO en df_historical_raw)            |
|                                                                   |
|  - df_train_final_pre_fe (Filas históricas con FUTURE_TARGET válido)|
|  - df_historical_full_pre_fe (df_historical_raw sin FUTURE_TARGET)  |
+-------------------------------------------------------------------+
      |
      V
+---------------------------------------------------------------------------------+
|  CONCATENACIÓN CLAVE: `df_combined_for_fe` = df_historical_full_pre_fe + df_predict_raw |
|  (Este DataFrame se ordena por tiempo)                                        |
+---------------------------------------------------------------------------------+
      |
      V
+-----------------------------------------------------------------+
| INGENIERÍA DE CARACTERÍSTICAS (Lags, Promedios Móviles, etc.)   |
| (TODAS se calculan en `df_combined_for_fe` mirando SOLO al pasado)|
| (`df_combined_fe`)                                              |
+-----------------------------------------------------------------+
      |
      V
+---------------------------------------------------------------------------+
| RE-SEPARACIÓN FINAL:                                                      |
|                                                                           |
|  - `df_train_final` = Merge(df_train_final_pre_fe, df_combined_fe con mismas fechas)  |
|  - `df_predict_final` = Filtro(df_combined_fe, donde fecha == PERIODO_PREDICCION) |
+---------------------------------------------------------------------------+
      |
      V
+-----------------------------------------------------------------+
| Post-procesamiento final (Tipos categóricos, manejo de NaNs)    |
| (Listo para entrenar y predecir)                                |
+-----------------------------------------------------------------+

¡Perfecto! Entender la evolución de las dimensiones de los DataFrames (`shape`) es clave para comprender cómo se construyen las características y se preparan los datos sin fugas. Vamos a desglosar el output paso a paso, explicando por qué cambian las filas y columnas.

### Explicación de los Shapes en cada etapa:

1.  **`Separating raw data for Training (up to 201912) and Prediction (202002)`**

    *   **`Historical raw data shape (up to 201912): (15985119, 14)`**
        *   **Filas (15,985,119)**: Representa el número total de combinaciones `(customer_id, product_id, fecha)` para las cuales tenemos datos históricos (desde el inicio hasta Diciembre de 2019). Este es el resultado de las etapas iniciales del pipeline (`run_initial_pipeline_steps_v2`), donde se cargaron los datos brutos, se fusionaron las combinaciones, se rellenaron las filas faltantes con `NaN` (para las combinaciones que no tenían `sell-in` en un mes dado), y se procesó la información del producto.
        *   **Columnas (14)**: Son las columnas originales de los datos (`tn`, `cust_request_qty`, `product_id`, `customer_id`, etc.) más las columnas añadidas en el preprocesamiento inicial (`fecha`, `periodo`) y cualquier otra columna base. En esta etapa, no se han añadido aún características de ingeniería temporal (lags, promedios móviles, etc.).

    *   **`Predict raw data shape (for 202002): (699141, 4)`**
        *   **Filas (699,141)**: Estas filas corresponden a todas las combinaciones únicas de `(customer_id, product_id)` que existieron en el `df_historical_raw`, pero solo para el período de predicción (`202002`). Se crea un "esqueleto" de estas combinaciones para el mes futuro.
        *   **Columnas (4)**: La razón por la que solo tiene 4 columnas (`customer_id`, `product_id`, `fecha`, `periodo`) es fundamental para evitar el "data leakage". Este DataFrame `df_predict_raw` **NO** contiene los valores reales de `tn`, `cust_request_qty`, `stock_final`, etc., para el período `202002`. Simplemente es una plantilla de lo que queremos predecir, ya que en un escenario real de predicción, no tendríamos esos valores para el futuro.

2.  **`Calculating target 'tn_future' on historical data...`**

    *   **`Shape de df_train_final_pre_fe: (14605776, 15)`**
        *   **Filas (14,605,776)**: Se reduce el número de filas de `15,985,119` a `14,605,776`. Esto ocurre porque se calcula la variable objetivo `tn_future` (el valor de `tn` 2 meses en el futuro) en el `df_historical_raw`. Para las últimas `TARGET_SHIFT` (2) filas de cada `(customer_id, product_id)` en el `df_historical_raw`, no hay un `tn` futuro disponible dentro del propio conjunto histórico, por lo que `tn_future` sería `NaN`. Estas filas (las de Diciembre 2019 y Noviembre 2019, ya que `TARGET_SHIFT` es 2) se eliminan del conjunto de entrenamiento para asegurar que solo entrenemos con ejemplos donde el `tn_future` es conocido.
        *   **Columnas (15)**: Se añade una columna: `tn_future`. Esto es la columna `tn` original (14 columnas) + la nueva columna `tn_future`. (`14 + 1 = 15`).

3.  **`Combining full historical and prediction raw data for feature engineering...`**

    *   **`Combined data shape for Feature Engineering: (16684260, 14)`**
        *   **Filas (16,684,260)**: Esta es la suma de las filas del `df_historical_full_pre_fe` (que es `df_historical_raw` sin la columna `FUTURE_TARGET`, es decir, `15,985,119` filas y 14 columnas) y las filas del `df_predict_raw` (`699,141` filas y 4 columnas). Al concatenarlos, el número total de filas es `15,985,119 + 699,141 = 16,684,260`.
        *   **Columnas (14)**: Cuando se concatenan DataFrames con conjuntos de columnas diferentes, Pandas intenta alinear las columnas. Dado que `df_historical_full_pre_fe` tiene 14 columnas base y `df_predict_raw` tiene un subconjunto de 4 de esas columnas, el DataFrame combinado tendrá la unión de todas las columnas. En este caso, son las 14 columnas originales antes de cualquier ingeniería de características temporal o la adición de `FUTURE_TARGET`. **Este es el paso crítico para el "Leakage-Free FE"**, ya que todas las características basadas en tiempo se calcularán sobre este DataFrame combinado, en orden cronológico, asegurando que los valores futuros no se usen para crear características de valores actuales o pasados.

4.  **`Applying feature engineering on combined data...`**
    *   A partir de aquí, el número de filas se mantiene constante (`16,684,260`) en cada paso de ingeniería de características. Lo que aumenta es el **número de columnas**, a medida que se añaden nuevas características calculadas (lealtad de marca, promedios móviles, lags, etc.).
    *   El log muestra advertencias (`FutureWarning`) sobre el uso de `observed=False` en las operaciones `groupby` de Pandas. Esto es una indicación de que en futuras versiones de Pandas, el comportamiento por defecto de `groupby` para columnas categóricas cambiará, por lo que se recomienda ser explícito con `observed=True` o `observed=False` para evitar sorpresas.

5.  **`Separating featured data back into Train and Predict sets...`**

    *   **`Train final data shape (after feature engineering): (14605776, 62)`**
        *   **Filas (14,605,776)**: Este número de filas coincide con `df_train_final_pre_fe`. Esto se debe a que el conjunto final de entrenamiento se forma tomando las filas que tenían un `FUTURE_TARGET` válido (y por lo tanto, eran adecuadas para el entrenamiento) y fusionando las características recién calculadas del DataFrame combinado.
        *   **Columnas (62)**: Originalmente, `df_train_final_pre_fe` tenía 15 columnas (incluyendo `FUTURE_TARGET`). El DataFrame `df_combined_fe` (resultado de la ingeniería de características sobre `df_combined_for_fe`) tiene `61` columnas (las 14 columnas base más las 47 nuevas características calculadas como lags, promedios, etc.). Al realizar el `pd.merge`, las columnas comunes (`customer_id`, `product_id`, `fecha`) se usan como clave y no se duplican. Por lo tanto, `5` columnas esenciales de `df_train_final_pre_fe` (`customer_id`, `product_id`, `fecha`, `TARGET`, `FUTURE_TARGET`) se combinan con las `61` columnas de `df_combined_fe`. Restando las 3 columnas de clave comunes, el total es `5 + 61 - 3 = 62` columnas.

    *   **`Predict final data shape (for 202002): (699141, 61)`**
        *   **Filas (699,141)**: Este número de filas coincide con el `Predict raw data shape`. Esto se debe a que este DataFrame se obtiene filtrando el `df_combined_fe` (el DataFrame con todas las características) solo por el `PREDICTION_PERIOD` (`202002`).
        *   **Columnas (61)**: Este DataFrame contiene todas las características que se calcularon en `df_combined_fe` (61 columnas), excluyendo la columna `FUTURE_TARGET` que no aplica al conjunto de predicción.

6.  **`Adding date features...` y `Ensuring ID columns are category type...` y `Filling numeric NaNs...`**

    *   **`Final Train DataFrame shape: (14605776, 66)`**
        *   **Filas (se mantiene)**: Las operaciones de adición de características de fecha, conversión de tipos y manejo de nulos no cambian el número de filas.
        *   **Columnas (66)**: Se añadieron 4 columnas nuevas basadas en la fecha (`month`, `year`, `day`, `dayofweek`). Por lo tanto, `62 + 4 = 66`.

    *   **`Final Predict DataFrame shape: (699141, 65)`**
        *   **Filas (se mantiene)**: Igual que el conjunto de entrenamiento.
        *   **Columnas (65)**: También se añadieron 4 columnas de fecha. Por lo tanto, `61 + 4 = 65`.

Estos `shapes` muestran cómo el pipeline transforma los datos brutos en conjuntos de entrenamiento y predicción ricos en características, manteniendo siempre la integridad temporal para evitar fugas de información.